# Dual Encoder based on mT5 Base model.
# Provides MODEL
from __gin__ import dynamic_registration

import seqio
from t5x import adafactor
from t5x_retrieval import feature_converters
from t5x_retrieval import models

ARCHITECTURE = %gin.REQUIRED
LABEL_THRESHOLD = %gin.REQUIRED
AFFINE_A = %gin.REQUIRED
AFFINE_B = %gin.REQUIRED
ADDITIVE_MARGIN = %gin.REQUIRED

# MT5 is identical to t5.1.1 architecture except for the vocabulary.
include 't5x_retrieval/configs/architectures/de_t5_1_1_flaxformer.gin'
NUM_EMBEDDINGS = 250112  # vocab size rounded to a multiple of 128 for TPU efficiency

# Architecture overrides
NUM_HEADS = 12
NUM_LAYERS = 12
HEAD_DIM = 64
EMBED_DIM = 768
MLP_DIM = 2048
PROJECTION_DIM = 768
LABEL_THRESHOLD = 0.5
AFFINE_A = 15.0
AFFINE_B = -11.0
ADDITIVE_MARGIN = 3.0

# Vocabulary (shared by encoder and decoder)
VOCABULARY = @seqio.SentencePieceVocabulary()
seqio.SentencePieceVocabulary.sentencepiece_model_file = "gs://t5-data/vocabs/mc4.250000.100extra/sentencepiece.model"

# Optimizer
# `learning_rate` is set by `Trainer.learning_rate_fn`.
OPTIMIZER = @adafactor.Adafactor()
adafactor.Adafactor:
  decay_rate = 0.8
  step_offset = 0

T5XR_INFERENCE_MODE = "similarity"

# Model
MODEL = @models.DualEncoderPointwiseDistillModel()
models.DualEncoderPointwiseDistillModel:
  label_threshold = %LABEL_THRESHOLD
  inference_mode = %T5XR_INFERENCE_MODE
  affine_a = %AFFINE_A
  affine_b = %AFFINE_B
  additive_margin = %ADDITIVE_MARGIN
  feature_converter_cls = @feature_converters.DualEncoderFeatureConverterFactory()
  module = %ARCHITECTURE  # provided by t5_flaxformer
  input_vocabulary = %VOCABULARY
  output_vocabulary = %VOCABULARY
  optimizer_def = %OPTIMIZER
