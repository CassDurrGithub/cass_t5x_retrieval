# Asymmetric Dual Encoder.
# Provides MODEL
# Required to be overridden:
# - LEFT_NUM_HEADS
# - LEFT_NUM_LAYERS
# - LEFT_HEAD_DIM
# - LEFT_NUM_EMBEDDINGS
# - LEFT_EMBED_DIM
# - LEFT_MLP_DIM
# - RIGHT_NUM_HEADS
# - RIGHT_NUM_LAYERS
# - RIGHT_HEAD_DIM
# - RIGHT_NUM_EMBEDDINGS
# - RIGHT_EMBED_DIM
# - RIGHT_MLP_DIM
from __gin__ import dynamic_registration

import seqio
from t5x import adafactor
from t5x_retrieval import feature_converters
from t5x_retrieval import models

ARCHITECTURE = %gin.REQUIRED

# MT5 is identical to t5.1.1 architecture except for the vocabulary.
include 't5x_retrieval/configs/architectures/ade_t5_1_1_flaxformer.gin'
LEFT_NUM_EMBEDDINGS = 250112  # vocab size rounded to a multiple of 128 for TPU efficiency
RIGHT_NUM_EMBEDDINGS = 250112  # vocab size rounded to a multiple of 128 for TPU efficiency
PROJECTION_DIM=768

# Vocabulary (shared by encoder and decoder)
VOCABULARY = @seqio.SentencePieceVocabulary()
seqio.SentencePieceVocabulary.sentencepiece_model_file = "gs://t5-data/vocabs/mc4.250000.100extra/sentencepiece.model"

# Optimizer
# `learning_rate` is set by `Trainer.learning_rate_fn`.
OPTIMIZER = @adafactor.Adafactor()
adafactor.Adafactor:
  decay_rate = 0.8
  step_offset = 0

T5XR_INFERENCE_MODE = "encode_left"

# Model
MODEL = @models.AsymmetricDualEncoderModel()
models.AsymmetricDualEncoderModel:
  use_negatives = False
  use_align_uniform = False
  inference_mode = %T5XR_INFERENCE_MODE
  feature_converter_cls = @feature_converters.DualEncoderFeatureConverterFactory()
  module = %ARCHITECTURE  # provided by architectures/ade_t5_1_1_flaxformer.gin
  input_vocabulary = %VOCABULARY
  output_vocabulary = %VOCABULARY
  optimizer_def = %OPTIMIZER
