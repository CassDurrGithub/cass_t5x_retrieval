# Flaxformer implementation of PMMX-One (p1) Dual Encoder with ViT,
# based on T5 (1.1) arch.

from __gin__ import dynamic_registration

from pmmx import multimodal_relative_position_biases
from pmmx import pmmx_architecture
from pmmx import vit_architecture
from t5x_retrieval import feature_converters

from flaxformer.architectures.dual_encoder import dual_encoder_architecture
from flaxformer.architectures.dual_encoder import l2_norm
from flaxformer.architectures.dual_encoder import poolings
from flaxformer.architectures.dual_encoder import similarity_functions
from flaxformer.architectures.t5 import t5_architecture
from flaxformer.components import dense
from flaxformer.components import embedding
from flaxformer.components import layer_norm
from flaxformer.components import relative_position_biases

include 'architectures/p1_de_t5_1_1_flaxformer.gin'

VIT_MLP_DIM = %gin.REQUIRED
VIT_NUM_LAYERS = %gin.REQUIRED
VIT_NUM_HEADS = %gin.REQUIRED
VIT_HIDDEN_SIZE = %gin.REQUIRED
VIT_PATCHES = %gin.REQUIRED
VIT_IMAGE_SIZE = %gin.REQUIRED
VIT_DROPOUT_RATE = 0.1
VIT_ATTENTION_DROPOUT_RATE = 0.1
VIT_STOCHASTIC_DEPTH = 0.0
# Pooling options for scenic ViT: token,map,gap
VIT_CLASSIFIER = 'token'
# Pooling options for big_vision ViT: gmp,gsp,map,map_buggy,0,tok
VIT_POOL_TYPE = 'map'
VIT_RETURN_POOLED_OUTPUT = True
VIT_FROZEN = False
VIT_ENCODER_FACTORY = @vit_encoder/vit_architecture.ViT

# Architecture (Flax Module)
ARCHITECTURE = @dual_encoder_architecture.MultimodalDualEncoder()
dual_encoder_architecture.MultimodalDualEncoder:
  left_encoder_factory = @pmmx_architecture.MultimodalEncoderWithViT
  shared_token_embedder_factory = @token_embedder/embedding.Embed
  left_pooler_factory = @poolings.MeanPooling
  l2_norm_factory = @l2_norm.L2Norm
  left_projection_layer_factory = @projection_layer/dense.DenseGeneral
  similarity_layer_factory = @similarity_functions.BatchDotProduct
  dtype = %ACTIVATION_DTYPE

feature_converters.DualEncoderFeatureConverterFactory:
  ########### PER-MODALITY FEATURE SPECS ############
  # Enriched from the features in p1_de_t5_1_1_flaxformer.gin,
  # with left/right_image_dense.

  # In the format of (feature_name, dtype, rank, modality_id).
  # modality_id: 1 for text, 0 for multimodal.
  feature_specs = (
      ("left_text_tokens", 'int32', 1, 0),
      ("left_text_dense", 'float32', 2, 1),
      ("left_sbv4_dense", 'float32', 2, 1),
      ("left_sbv5_dense", 'float32', 2, 1),
      ("left_sbv4_obj_dense", 'float32', 2, 1),
      ("left_frcnn_dense", 'float32', 2, 1),
      ("left_frcnn_obj_dense", 'float32', 2, 1),
      ("left_sbv4_tokens", 'int32', 2, 1),
      ("left_sbv3_dense", 'float32', 2, 1),
      ("left_image_dense", 'float32', 2, 1),
      ("right_text_tokens", 'int32', 1, 0),
      ("right_text_dense", 'float32', 2, 1),
      ("right_sbv4_dense", 'float32', 2, 1),
      ("right_sbv5_dense", 'float32', 2, 1),
      ("right_sbv4_obj_dense", 'float32', 2, 1),
      ("right_frcnn_dense", 'float32', 2, 1),
      ("right_frcnn_obj_dense", 'float32', 2, 1),
      ("right_sbv4_tokens", 'int32', 2, 1),
      ("right_sbv3_dense", 'float32', 2, 1),
      ("right_image_dense", 'float32', 2, 1),
      ("targets", 'int32', 1, 0),  ## Always have a `targets`.
  )
  ########### END PER-MODALITY FEATURE SPECS ##############

# Encoder
pmmx_architecture.MultimodalEncoderWithViT:
  num_layers = %NUM_LAYERS

  feature_spec = (('text_tokens', 'text_tokens'), ('sbv5_dense', 'sbv5_dense'),
                  ('sbv4_dense', 'sbv4_dense'), ('sbv4_tokens', 'sbv4_tokens'),
                  ('sbv3_dense', 'sbv3_dense'),
                  ('text_dense','text_dense'),
                  ('frcnn_dense', 'frcnn_dense'),
                  ('sbv4_obj_dense', 'sbv4_obj_dense'),
                  ('frcnn_obj_dense', 'frcnn_obj_dense'),
                  ('image_dense', 'image_dense'))
  modality_spec = ('text_tokens', 'sbv5_dense', 'sbv4_dense', 'sbv4_tokens',
                   'sbv3_dense', 'text_dense', 'frcnn_dense', 'sbv4_obj_dense',
                   'frcnn_obj_dense', 'image_dense')
  modality_embedders_spec = {
    'sbv5_dense': [
        ('sbv5_dense', @pmmx_architecture.DenseEmbed)
    ],
    'sbv4_dense': [
        ('sbv4_dense', @pmmx_architecture.DenseEmbed)
    ],
    'sbv4_tokens': [
        ('sbv4_tokens', @pmmx_architecture.StarburstTokenEmbed)
    ],
    'sbv3_dense': [
        ('sbv3_dense', @pmmx_architecture.DenseEmbed)
    ],
    'text_dense': [
        ('text_dense', @pmmx_architecture.DenseEmbed)
    ],
    'frcnn_dense': [
        ('frcnn_dense', @pmmx_architecture.DenseEmbed)
    ],
    'sbv4_obj_dense': [
        ('sbv4_obj_dense', @pmmx_architecture.DenseEmbed)
    ],
    'frcnn_obj_dense': [
        ('frcnn_obj_dense', @pmmx_architecture.DenseEmbed)
    ],
    'image_dense': [
        ('image_dense', @pmmx_architecture.DenseEmbed)
    ],
  }
  ############## END FEATURES AND MODALITIES ###############

  layer_factory = @pmmx_architecture.MultimodalEncoderLayer
  input_dropout_factory = %DROPOUT_FACTORY
  output_dropout_factory = %DROPOUT_FACTORY
  layer_norm_factory = @layer_norm.T5LayerNorm
  shared_relative_position_bias_factory = @relative_position_biases.RelativePositionBiases
  shared_multimodal_relative_position_bias_factory = @multimodal_relative_position_biases.MultimodalRelativePositionBiases
  vit_encoder_factory = %VIT_ENCODER_FACTORY
  image_size = %VIT_IMAGE_SIZE
  freeze_vit = %VIT_FROZEN
  dtype = %ACTIVATION_DTYPE

# Scenic ViT encoder.
vit_encoder/vit_architecture.ViT:
  mlp_dim = %VIT_MLP_DIM
  num_layers = %VIT_NUM_LAYERS
  num_heads = %VIT_NUM_HEADS
  patches = %VIT_PATCHES
  hidden_size = %VIT_HIDDEN_SIZE
  dropout_rate = %VIT_DROPOUT_RATE
  attention_dropout_rate = %VIT_ATTENTION_DROPOUT_RATE
  stochastic_depth = %VIT_STOCHASTIC_DEPTH
  classifier = %VIT_CLASSIFIER
  return_pooled_output = %VIT_RETURN_POOLED_OUTPUT

# BigVision ViT encoder.
vit_encoder/vit_architecture.BigVisionViT:
  patch_size = %VIT_PATCHES
  width = %VIT_HIDDEN_SIZE
  depth = %VIT_NUM_LAYERS
  mlp_dim = %VIT_MLP_DIM
  num_heads = %VIT_NUM_HEADS
  dropout = %VIT_DROPOUT_RATE
  pool_type = %VIT_POOL_TYPE
  return_pooled_output = %VIT_RETURN_POOLED_OUTPUT
